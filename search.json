[{"path":"https://caravagnalab.github.io/tickTack/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 tickTack authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://caravagnalab.github.io/tickTack/articles/tickTack.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"tickTack","text":"tickTack requires input CNAqc object attributes cna, mutations metadata. main input tool : * read counts somatic mutations single-nucleotide variants (SNVs) mutation attribute; * allele-specific copy number segments (CNAs) clonal segments must encoded cna attribute; * tumor purity estimate metadata. tool uses chromosome coordinates map mutations segments. conversion relative absolute genome coordinates requires fix reference genome build; supported reference GRCh38/hg17 also supported CNAqc. tickTack can used time genomic segmnents affected Copy Number event, identifying main clocks event can associated.","code":""},{"path":"https://caravagnalab.github.io/tickTack/articles/tickTack.html","id":"the-model","dir":"Articles","previous_headings":"","what":"The model","title":"tickTack","text":"following concepts used infer copy number timing.","code":""},{"path":"https://caravagnalab.github.io/tickTack/articles/tickTack.html","id":"vaf-peaks","dir":"Articles","previous_headings":"The model","what":"VAF peaks","title":"tickTack","text":"point mutations present duplicated region duplicated copy segment. Therefore can use proportion mutations happede Copy Number event distinguishing mutations single copy double copies.  Therefore, single segment value clock associated Copy Number event obtained transformation proportions mutations single double copy. following quantities need considered:  case trisomy without LOH, can consider fact , τ\\tau, 1 chromosome accumulate mutations duplicate, accumulate mutations remain single copy. hand, τ\\tau, chromosomes accumulate mutations remain single copy. Therefore one can write system: {N2=ρτN1=ρτ+3ρ(1−τ)\\begin{align}     \\begin{cases}         N_2 = \\rho \\tau           N_1 = \\rho \\tau + 3\\rho(1 - \\tau) \\nonumber % Use \\nonumber prevent numbering specific line     \\end{cases} \\end{align} Using first one obtain ρ\\rho inserting second one, solution τ\\tau becomes: $$\\begin{equation}     N_1 = N_2 + \\frac{3N_2}{\\tau}(1-\\tau) \\hspace{2mm} \\rightarrow \\hspace{2mm} N_1 + 2N_2 = \\frac{3N_2}{\\tau} \\hspace{2mm} \\rightarrow \\hspace{2mm} \\tau = \\frac{3N_2}{N_1 + 2N_2} \\end{equation}$$ case CNLOH segment doubling can treated together. fact, first case, τ\\tau mutations duplicate accumulate single chromosome τ\\tau mutations remain single copy accumulate two chromosomes. system therefore becomes: {N2=ρτN1=2ρ(1−τ)\\begin{align}     \\begin{cases}         N_2 = \\rho \\tau           N_1 = 2\\rho(1 - \\tau) \\nonumber      \\end{cases} \\end{align} similar things happens case 2:2, difference number chromosomes accumulating certain type mutation double, τ\\tau. Hence, system becomes: {N2=2ρτN1=4ρ(1−τ)\\begin{align}     \\begin{cases}         N_2 = 2\\rho \\tau           N_1 = 4\\rho(1 - \\tau) \\nonumber      \\end{cases} \\end{align} Therefore, two system can solved similarly (can simply drop factor 2 second case). solution τ\\tau easily becomes: $$\\begin{equation}     N_1 = \\frac{2N_2(1-\\tau)}{\\tau} \\hspace{2mm} \\rightarrow \\hspace{2mm} \\tau(N_1 + 2N_2) = 2N_2 \\hspace{2mm} \\rightarrow \\hspace{2mm} \\tau = \\frac{2N_2}{2N_2 + N_1} \\end{equation}$$","code":""},{"path":"https://caravagnalab.github.io/tickTack/articles/tickTack.html","id":"clonal-cnas","dir":"Articles","previous_headings":"The model","what":"Clonal CNAs","title":"tickTack","text":"Consider: mutations sitting segment nA:nBnA:nB; tumour purity π\\pi; healthy diploid normal; Since proportion reads tumour π(nA+nB)\\pi(n_A+n_B), normal 2(1−π)2(1-\\pi). , muations present mm copies tumour genome peak VAF value vm(c)=mπc2(1−π)+π(nA+nB). v_m(c) = \\dfrac{m \\pi c}{ 2 (1 - \\pi) + \\pi (n_A+n_B) } \\, .  Also quote using >: “gives [code] safety [code] speed deserves neither.” (via)","code":"library(tickTack) # Load template data data <- tickTack::pcawg_example  library(tibble) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union  data_reduced <- list(mutations = tibble( data$mutations %>% filter(chr %in% paste0(\"chr\",c(1:4)))),                       cna = tibble( data$cna %>% filter(chr %in% paste0(\"chr\",c(1:4)))),                      metadata = tibble(purity = data$metadata$purity)) data_reduced <- tickTack::fit_h(data_reduced, max_attempts=2, INIT=TRUE, tolerance = 0.1) #> [1] 1 #> [1] 2 #> ℹ Adding segment with index 2 to segments included in the inference. #> [1] 3 #> ℹ Adding segment with index 3 to segments included in the inference. #> [1] 4 #> [1] 5 #> ℹ Adding segment with index 5 to segments included in the inference. #> [1] 6 #> ℹ Adding segment with index 6 to segments included in the inference. #> [1] 7 #> [1] 8 #> [1] 9 #> [1] 10 #> ℹ Adding segment with index 10 to segments included in the inference. #> [1] 11 #> ℹ Adding segment with index 11 to segments included in the inference. #> [1] 12 #> ℹ Adding segment with index 12 to segments included in the inference. #> [1] 13 #> ℹ Adding segment with index 13 to segments included in the inference. #> [1] 14 #> [1] 15 #> [1] 16 #> [1] 17 #> [1] 18 #> [1] 19 #> [1] 20 #> [1] 21 #> [1] 22 #> [1] 23 #> [1] 24 #> [1] 25 #> [1] 26 #> [1] 27 #> [1] 28 #> [1] 29 #> [1] 30 #> ℹ Adding segment with index 30 to segments included in the inference. #> [1] 31 #> ℹ Adding segment with index 31 to segments included in the inference. #> [1] 32 #> ℹ Adding segment with index 32 to segments included in the inference. #> [1] 33 #> [1] 34 #> ℹ Adding segment with index 34 to segments included in the inference. #> init_taus from clustering  0.788151983127011 #> Attempt 1 of 2 #> ------------------------------------------------------------  #> EXPERIMENTAL ALGORITHM:  #>   This procedure has not been thoroughly tested and may be unstable  #>   or buggy. The interface is subject to change.  #> ------------------------------------------------------------  #> Gradient evaluation took 0.000979 seconds  #> 1000 transitions using 10 leapfrog steps per transition would take 9.79 seconds.  #> Adjust your expectations accordingly!  #> Begin eta adaptation.  #> Iteration:   1 / 250 [  0%]  (Adaptation)  #> Iteration:  50 / 250 [ 20%]  (Adaptation)  #> Iteration: 100 / 250 [ 40%]  (Adaptation)  #> Iteration: 150 / 250 [ 60%]  (Adaptation)  #> Iteration: 200 / 250 [ 80%]  (Adaptation)  #> Success! Found best value [eta = 1] earlier than expected.  #> Begin stochastic gradient ascent.  #>   iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes   #>      1        -4862.225             1.000            1.000  #>      2        -4834.955             0.503            1.000  #>      3        -4837.841             0.335            0.006   MEDIAN ELBO CONVERGED  #> Drawing a sample of size 1000 from the approximate posterior...   #> COMPLETED.  #> Finished in  2.5 seconds. #> [[1]] #> [[1]]$w #>       [,1] #>  [1,]    1 #>  [2,]    1 #>  [3,]    1 #>  [4,]    1 #>  [5,]    1 #>  [6,]    1 #>  [7,]    1 #>  [8,]    1 #>  [9,]    1 #> [10,]    1 #> [11,]    1 #> [12,]    1 #>  #> [[1]]$tau #> [1] 0.788152 #>  #> [[1]]$phi #> [1] 1 #>  #> [[1]]$kappa #> [1] 5 #> ELBO for this run: -4837.84 #> Attempt 2 of 2 #> ------------------------------------------------------------  #> EXPERIMENTAL ALGORITHM:  #>   This procedure has not been thoroughly tested and may be unstable  #>   or buggy. The interface is subject to change.  #> ------------------------------------------------------------  #> Gradient evaluation took 0.000986 seconds  #> 1000 transitions using 10 leapfrog steps per transition would take 9.86 seconds.  #> Adjust your expectations accordingly!  #> Begin eta adaptation.  #> Iteration:   1 / 250 [  0%]  (Adaptation)  #> Iteration:  50 / 250 [ 20%]  (Adaptation)  #> Iteration: 100 / 250 [ 40%]  (Adaptation)  #> Iteration: 150 / 250 [ 60%]  (Adaptation)  #> Iteration: 200 / 250 [ 80%]  (Adaptation)  #> Success! Found best value [eta = 1] earlier than expected.  #> Begin stochastic gradient ascent.  #>   iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes   #>      1        -4869.330             1.000            1.000  #>      2        -4847.017             0.502            1.000  #>      3        -4835.718             0.336            0.005   MEDIAN ELBO CONVERGED  #> Drawing a sample of size 1000 from the approximate posterior...   #> COMPLETED.  #> Finished in  2.7 seconds. #> [[1]] #> [[1]]$w #>       [,1] #>  [1,]    1 #>  [2,]    1 #>  [3,]    1 #>  [4,]    1 #>  [5,]    1 #>  [6,]    1 #>  [7,]    1 #>  [8,]    1 #>  [9,]    1 #> [10,]    1 #> [11,]    1 #> [12,]    1 #>  #> [[1]]$tau #> [1] 0.8053702 #>  #> [[1]]$phi #> [1] 1 #>  #> [[1]]$kappa #> [1] 5 #> ELBO for this run: -4835.72 #> [1] \"output_files /tmp/RtmpWVAHud/timing_mixed_simple-diagnostic-202411251032-1-89e17c.csv\\n\" #> init_taus from clustering  0.748820925173087 init_taus from clustering  0.83884804512148 #> Attempt 1 of 2 #> ------------------------------------------------------------  #> EXPERIMENTAL ALGORITHM:  #>   This procedure has not been thoroughly tested and may be unstable  #>   or buggy. The interface is subject to change.  #> ------------------------------------------------------------  #> Gradient evaluation took 0.001797 seconds  #> 1000 transitions using 10 leapfrog steps per transition would take 17.97 seconds.  #> Adjust your expectations accordingly!  #> Begin eta adaptation.  #> Iteration:   1 / 250 [  0%]  (Adaptation)  #> Iteration:  50 / 250 [ 20%]  (Adaptation)  #> Iteration: 100 / 250 [ 40%]  (Adaptation)  #> Iteration: 150 / 250 [ 60%]  (Adaptation)  #> Iteration: 200 / 250 [ 80%]  (Adaptation)  #> Success! Found best value [eta = 1] earlier than expected.  #> Begin stochastic gradient ascent.  #>   iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes   #>      1        -4879.323             1.000            1.000  #>      2        -4861.148             0.502            1.000  #>      3        -4850.844             0.335            0.004   MEDIAN ELBO CONVERGED  #> Drawing a sample of size 1000 from the approximate posterior...   #> COMPLETED.  #> Finished in  12.9 seconds. #> [[1]] #> [[1]]$w #>               [,1]        [,2] #>  [1,] 0.0006668310 0.999333169 #>  [2,] 0.0007957734 0.999204227 #>  [3,] 0.0310593697 0.968940630 #>  [4,] 0.6534324339 0.346567566 #>  [5,] 0.9286343089 0.071365691 #>  [6,] 0.9921591514 0.007840849 #>  [7,] 0.7229043894 0.277095611 #>  [8,] 0.3650752701 0.634924730 #>  [9,] 0.9769363238 0.023063676 #> [10,] 0.1132978135 0.886702186 #> [11,] 0.9884208434 0.011579157 #> [12,] 0.9949594727 0.005040527 #>  #> [[1]]$tau #> [1] 0.7488209 0.8388480 #>  #> [[1]]$phi #> [1] 0.5 0.5 #>  #> [[1]]$kappa #> [1] 5 #> ELBO for this run: -4850.84 #> Attempt 2 of 2 #> ------------------------------------------------------------  #> EXPERIMENTAL ALGORITHM:  #>   This procedure has not been thoroughly tested and may be unstable  #>   or buggy. The interface is subject to change.  #> ------------------------------------------------------------  #> Gradient evaluation took 0.00177 seconds  #> 1000 transitions using 10 leapfrog steps per transition would take 17.7 seconds.  #> Adjust your expectations accordingly!  #> Begin eta adaptation.  #> Iteration:   1 / 250 [  0%]  (Adaptation)  #> Iteration:  50 / 250 [ 20%]  (Adaptation)  #> Iteration: 100 / 250 [ 40%]  (Adaptation)  #> Iteration: 150 / 250 [ 60%]  (Adaptation)  #> Iteration: 200 / 250 [ 80%]  (Adaptation)  #> Success! Found best value [eta = 1] earlier than expected.  #> Begin stochastic gradient ascent.  #>   iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes   #>      1        -4910.340             1.000            1.000  #>      2        -4859.528             0.505            1.000  #>      3        -4855.381             0.337            0.010   MEDIAN ELBO CONVERGED  #> Drawing a sample of size 1000 from the approximate posterior...   #> COMPLETED.  #> Finished in  12.9 seconds. #> [[1]] #> [[1]]$w #>               [,1]        [,2] #>  [1,] 0.0006668310 0.999333169 #>  [2,] 0.0007957734 0.999204227 #>  [3,] 0.0310593697 0.968940630 #>  [4,] 0.6534324339 0.346567566 #>  [5,] 0.9286343089 0.071365691 #>  [6,] 0.9921591514 0.007840849 #>  [7,] 0.7229043894 0.277095611 #>  [8,] 0.3650752701 0.634924730 #>  [9,] 0.9769363238 0.023063676 #> [10,] 0.1132978135 0.886702186 #> [11,] 0.9884208434 0.011579157 #> [12,] 0.9949594727 0.005040527 #>  #> [[1]]$tau #> [1] 0.8101585 0.8383171 #>  #> [[1]]$phi #> [1] 0.5 0.5 #>  #> [[1]]$kappa #> [1] 5 #> ELBO for this run: -4855.38 #> [1] \"output_files /tmp/RtmpWVAHud/timing_mixed_simple-diagnostic-202411251032-1-07c402.csv\\n\" #> init_taus from clustering  0.847724890154379 init_taus from clustering  0.737090871364337 init_taus from clustering  0.790160541098041 #> Attempt 1 of 2 #> ------------------------------------------------------------  #> EXPERIMENTAL ALGORITHM:  #>   This procedure has not been thoroughly tested and may be unstable  #>   or buggy. The interface is subject to change.  #> ------------------------------------------------------------  #> Gradient evaluation took 0.002617 seconds  #> 1000 transitions using 10 leapfrog steps per transition would take 26.17 seconds.  #> Adjust your expectations accordingly!  #> Begin eta adaptation.  #> Iteration:   1 / 250 [  0%]  (Adaptation)  #> Iteration:  50 / 250 [ 20%]  (Adaptation)  #> Iteration: 100 / 250 [ 40%]  (Adaptation)  #> Iteration: 150 / 250 [ 60%]  (Adaptation)  #> Iteration: 200 / 250 [ 80%]  (Adaptation)  #> Success! Found best value [eta = 1] earlier than expected.  #> Begin stochastic gradient ascent.  #>   iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes   #>      1        -4889.540             1.000            1.000  #>      2        -4872.928             0.502            1.000  #>      3        -4867.621             0.335            0.003   MEDIAN ELBO CONVERGED  #> Drawing a sample of size 1000 from the approximate posterior...   #> COMPLETED.  #> Finished in  11.6 seconds. #> [[1]] #> [[1]]$w #>              [,1]        [,2]         [,3] #>  [1,] 0.936531356 0.011447948 0.0520206962 #>  [2,] 0.980519868 0.003841245 0.0156388872 #>  [3,] 0.676067624 0.044301169 0.2796312068 #>  [4,] 0.003193491 0.004762000 0.9920445091 #>  [5,] 0.026118067 0.893275963 0.0806059707 #>  [6,] 0.031943043 0.737289696 0.2307672601 #>  [7,] 0.011226787 0.021819873 0.9669533400 #>  [8,] 0.040147886 0.023107730 0.9367443835 #>  [9,] 0.001662723 0.991994774 0.0063425029 #> [10,] 0.801481982 0.059056552 0.1394614653 #> [11,] 0.000160689 0.999470940 0.0003683708 #> [12,] 0.028163652 0.778284368 0.1935519793 #>  #> [[1]]$tau #> [1] 0.8477249 0.7370909 0.7901605 #>  #> [[1]]$phi #> [1] 0.3333333 0.3333333 0.3333333 #>  #> [[1]]$kappa #> [1] 5 #> ELBO for this run: -4867.62 #> Attempt 2 of 2 #> ------------------------------------------------------------  #> EXPERIMENTAL ALGORITHM:  #>   This procedure has not been thoroughly tested and may be unstable  #>   or buggy. The interface is subject to change.  #> ------------------------------------------------------------  #> Gradient evaluation took 0.002639 seconds  #> 1000 transitions using 10 leapfrog steps per transition would take 26.39 seconds.  #> Adjust your expectations accordingly!  #> Begin eta adaptation.  #> Iteration:   1 / 250 [  0%]  (Adaptation)  #> Iteration:  50 / 250 [ 20%]  (Adaptation)  #> Iteration: 100 / 250 [ 40%]  (Adaptation)  #> Iteration: 150 / 250 [ 60%]  (Adaptation)  #> Iteration: 200 / 250 [ 80%]  (Adaptation)  #> Success! Found best value [eta = 1] earlier than expected.  #> Begin stochastic gradient ascent.  #>   iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes   #>      1        -4902.072             1.000            1.000  #>      2        -4879.205             0.502            1.000  #>      3        -4864.700             0.336            0.005   MEDIAN ELBO CONVERGED  #> Drawing a sample of size 1000 from the approximate posterior...   #> COMPLETED.  #> Finished in  11.8 seconds. #> [[1]] #> [[1]]$w #>              [,1]        [,2]         [,3] #>  [1,] 0.936531356 0.011447948 0.0520206962 #>  [2,] 0.980519868 0.003841245 0.0156388872 #>  [3,] 0.676067624 0.044301169 0.2796312068 #>  [4,] 0.003193491 0.004762000 0.9920445091 #>  [5,] 0.026118067 0.893275963 0.0806059707 #>  [6,] 0.031943043 0.737289696 0.2307672601 #>  [7,] 0.011226787 0.021819873 0.9669533400 #>  [8,] 0.040147886 0.023107730 0.9367443835 #>  [9,] 0.001662723 0.991994774 0.0063425029 #> [10,] 0.801481982 0.059056552 0.1394614653 #> [11,] 0.000160689 0.999470940 0.0003683708 #> [12,] 0.028163652 0.778284368 0.1935519793 #>  #> [[1]]$tau #> [1] 0.7378740 0.7268427 0.5307254 #>  #> [[1]]$phi #> [1] 0.3333333 0.3333333 0.3333333 #>  #> [[1]]$kappa #> [1] 5 #> ELBO for this run: -4864.7 #> [1] \"output_files /tmp/RtmpWVAHud/timing_mixed_simple-diagnostic-202411251033-1-380ec8.csv\\n\" #> init_taus from clustering  0.736054558698923 init_taus from clustering  0.888742403615967 init_taus from clustering  0.787255814738399 init_taus from clustering  0.834448909922351 #> Attempt 1 of 2 #> ------------------------------------------------------------  #> EXPERIMENTAL ALGORITHM:  #>   This procedure has not been thoroughly tested and may be unstable  #>   or buggy. The interface is subject to change.  #> ------------------------------------------------------------  #> Gradient evaluation took 0.003268 seconds  #> 1000 transitions using 10 leapfrog steps per transition would take 32.68 seconds.  #> Adjust your expectations accordingly!  #> Begin eta adaptation.  #> Iteration:   1 / 250 [  0%]  (Adaptation)  #> Iteration:  50 / 250 [ 20%]  (Adaptation)  #> Iteration: 100 / 250 [ 40%]  (Adaptation)  #> Iteration: 150 / 250 [ 60%]  (Adaptation)  #> Iteration: 200 / 250 [ 80%]  (Adaptation)  #> Success! Found best value [eta = 1] earlier than expected.  #> Begin stochastic gradient ascent.  #>   iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes   #>      1        -4919.035             1.000            1.000  #>      2        -4896.829             0.502            1.000  #>      3        -4887.273             0.335            0.005   MEDIAN ELBO CONVERGED  #> Drawing a sample of size 1000 from the approximate posterior...   #> COMPLETED.  #> Finished in  15.0 seconds. #> [[1]] #> [[1]]$w #>               [,1]         [,2]         [,3]         [,4] #>  [1,] 0.0006211711 0.0020554103 0.0022571680 0.9950662507 #>  [2,] 0.0041558367 0.0200454818 0.0154845315 0.9603141500 #>  [3,] 0.0099690800 0.0195195849 0.0545812304 0.9159301047 #>  [4,] 0.0001971846 0.0001239884 0.9994689917 0.0002098352 #>  [5,] 0.8792246698 0.0137477419 0.0781551655 0.0288724227 #>  [6,] 0.6645283031 0.0153231363 0.2764039773 0.0437445833 #>  [7,] 0.0072223836 0.0015249220 0.9851040005 0.0061486939 #>  [8,] 0.0333383305 0.0173805013 0.8344083729 0.1148727954 #>  [9,] 0.9938463141 0.0006092254 0.0042482281 0.0012962324 #> [10,] 0.0001010394 0.9996880954 0.0001024007 0.0001084646 #> [11,] 0.9976909001 0.0002570023 0.0015686781 0.0004834195 #> [12,] 0.7114988397 0.0139449641 0.2353237231 0.0392324730 #>  #> [[1]]$tau #> [1] 0.7360546 0.8800000 0.7872558 0.8344489 #>  #> [[1]]$phi #> [1] 0.25 0.25 0.25 0.25 #>  #> [[1]]$kappa #> [1] 5 #> ELBO for this run: -4887.27 #> Attempt 2 of 2 #> ------------------------------------------------------------  #> EXPERIMENTAL ALGORITHM:  #>   This procedure has not been thoroughly tested and may be unstable  #>   or buggy. The interface is subject to change.  #> ------------------------------------------------------------  #> Gradient evaluation took 0.003323 seconds  #> 1000 transitions using 10 leapfrog steps per transition would take 33.23 seconds.  #> Adjust your expectations accordingly!  #> Begin eta adaptation.  #> Iteration:   1 / 250 [  0%]  (Adaptation)  #> Iteration:  50 / 250 [ 20%]  (Adaptation)  #> Iteration: 100 / 250 [ 40%]  (Adaptation)  #> Iteration: 150 / 250 [ 60%]  (Adaptation)  #> Iteration: 200 / 250 [ 80%]  (Adaptation)  #> Success! Found best value [eta = 1] earlier than expected.  #> Begin stochastic gradient ascent.  #>   iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes   #>      1        -4958.237             1.000            1.000  #>      2        -4935.171             0.502            1.000  #>      3        -4900.929             0.337            0.007   MEDIAN ELBO CONVERGED  #> Drawing a sample of size 1000 from the approximate posterior...   #> COMPLETED.  #> Finished in  15.1 seconds. #> [[1]] #> [[1]]$w #>               [,1]         [,2]         [,3]         [,4] #>  [1,] 0.0006211711 0.0020554103 0.0022571680 0.9950662507 #>  [2,] 0.0041558367 0.0200454818 0.0154845315 0.9603141500 #>  [3,] 0.0099690800 0.0195195849 0.0545812304 0.9159301047 #>  [4,] 0.0001971846 0.0001239884 0.9994689917 0.0002098352 #>  [5,] 0.8792246698 0.0137477419 0.0781551655 0.0288724227 #>  [6,] 0.6645283031 0.0153231363 0.2764039773 0.0437445833 #>  [7,] 0.0072223836 0.0015249220 0.9851040005 0.0061486939 #>  [8,] 0.0333383305 0.0173805013 0.8344083729 0.1148727954 #>  [9,] 0.9938463141 0.0006092254 0.0042482281 0.0012962324 #> [10,] 0.0001010394 0.9996880954 0.0001024007 0.0001084646 #> [11,] 0.9976909001 0.0002570023 0.0015686781 0.0004834195 #> [12,] 0.7114988397 0.0139449641 0.2353237231 0.0392324730 #>  #> [[1]]$tau #> [1] 0.8562327 0.8775958 0.7488825 0.8625914 #>  #> [[1]]$phi #> [1] 0.25 0.25 0.25 0.25 #>  #> [[1]]$kappa #> [1] 5 #> ELBO for this run: -4900.93 #> [1] \"output_files /tmp/RtmpWVAHud/timing_mixed_simple-diagnostic-202411251033-1-76e366.csv\\n\" #> init_taus from clustering  0.727029676930893 init_taus from clustering  0.754642114738131 init_taus from clustering  0.888839383149628 init_taus from clustering  0.789260255154001 init_taus from clustering  0.834810819080032 #> Attempt 1 of 2 #> ------------------------------------------------------------  #> EXPERIMENTAL ALGORITHM:  #>   This procedure has not been thoroughly tested and may be unstable  #>   or buggy. The interface is subject to change.  #> ------------------------------------------------------------  #> Gradient evaluation took 0.004106 seconds  #> 1000 transitions using 10 leapfrog steps per transition would take 41.06 seconds.  #> Adjust your expectations accordingly!  #> Begin eta adaptation.  #> Iteration:   1 / 250 [  0%]  (Adaptation)  #> Iteration:  50 / 250 [ 20%]  (Adaptation)  #> Iteration: 100 / 250 [ 40%]  (Adaptation)  #> Iteration: 150 / 250 [ 60%]  (Adaptation)  #> Iteration: 200 / 250 [ 80%]  (Adaptation)  #> Success! Found best value [eta = 1] earlier than expected.  #> Begin stochastic gradient ascent.  #>   iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes   #>      1        -4937.557             1.000            1.000  #>      2        -4908.591             0.503            1.000  #>      3        -4899.188             0.336            0.006   MEDIAN ELBO CONVERGED  #> Drawing a sample of size 1000 from the approximate posterior...   #> COMPLETED.  #> Finished in  18.3 seconds. #> [[1]] #> [[1]]$w #>               [,1]         [,2]         [,3]         [,4]         [,5] #>  [1,] 0.0004120960 0.0006573312 0.0014851868 0.0017660228 0.9956793632 #>  [2,] 0.0031801811 0.0054562210 0.0178843278 0.0149554365 0.9585238335 #>  [3,] 0.0086423778 0.0166373298 0.0204228407 0.0638474028 0.8904500488 #>  [4,] 0.0018380974 0.0061121834 0.0006949293 0.9885698945 0.0027848954 #>  [5,] 0.8734028140 0.0868426513 0.0047300644 0.0252110011 0.0098134692 #>  [6,] 0.0026926400 0.9945285170 0.0002245926 0.0020997137 0.0004545367 #>  [7,] 0.0107768837 0.0413442326 0.0031256837 0.9319658502 0.0127873497 #>  [8,] 0.0183876254 0.0474119845 0.0124526023 0.8411272154 0.0806205724 #>  [9,] 0.9298635588 0.0573157600 0.0012460216 0.0087982654 0.0027763941 #> [10,] 0.0001000959 0.0001001621 0.9995981499 0.0001003351 0.0001012569 #> [11,] 0.6705651433 0.2867629917 0.0036093776 0.0304463281 0.0086161593 #> [12,] 0.0001144042 0.9995740729 0.0001005676 0.0001092730 0.0001016824 #>  #> [[1]]$tau #> [1] 0.7270297 0.7546421 0.8800000 0.7892603 0.8348108 #>  #> [[1]]$phi #> [1] 0.2 0.2 0.2 0.2 0.2 #>  #> [[1]]$kappa #> [1] 5 #> ELBO for this run: -4899.19 #> Attempt 2 of 2 #> ------------------------------------------------------------  #> EXPERIMENTAL ALGORITHM:  #>   This procedure has not been thoroughly tested and may be unstable  #>   or buggy. The interface is subject to change.  #> ------------------------------------------------------------  #> Gradient evaluation took 0.004039 seconds  #> 1000 transitions using 10 leapfrog steps per transition would take 40.39 seconds.  #> Adjust your expectations accordingly!  #> Begin eta adaptation.  #> Iteration:   1 / 250 [  0%]  (Adaptation)  #> Iteration:  50 / 250 [ 20%]  (Adaptation)  #> Iteration: 100 / 250 [ 40%]  (Adaptation)  #> Iteration: 150 / 250 [ 60%]  (Adaptation)  #> Iteration: 200 / 250 [ 80%]  (Adaptation)  #> Success! Found best value [eta = 1] earlier than expected.  #> Begin stochastic gradient ascent.  #>   iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes   #>      1        -4930.180             1.000            1.000  #>      2        -4903.911             0.503            1.000  #>      3        -4888.623             0.336            0.005   MEDIAN ELBO CONVERGED  #> Drawing a sample of size 1000 from the approximate posterior...   #> COMPLETED.  #> Finished in  18.4 seconds. #> [[1]] #> [[1]]$w #>               [,1]         [,2]         [,3]         [,4]         [,5] #>  [1,] 0.0004120960 0.0006573312 0.0014851868 0.0017660228 0.9956793632 #>  [2,] 0.0031801811 0.0054562210 0.0178843278 0.0149554365 0.9585238335 #>  [3,] 0.0086423778 0.0166373298 0.0204228407 0.0638474028 0.8904500488 #>  [4,] 0.0018380974 0.0061121834 0.0006949293 0.9885698945 0.0027848954 #>  [5,] 0.8734028140 0.0868426513 0.0047300644 0.0252110011 0.0098134692 #>  [6,] 0.0026926400 0.9945285170 0.0002245926 0.0020997137 0.0004545367 #>  [7,] 0.0107768837 0.0413442326 0.0031256837 0.9319658502 0.0127873497 #>  [8,] 0.0183876254 0.0474119845 0.0124526023 0.8411272154 0.0806205724 #>  [9,] 0.9298635588 0.0573157600 0.0012460216 0.0087982654 0.0027763941 #> [10,] 0.0001000959 0.0001001621 0.9995981499 0.0001003351 0.0001012569 #> [11,] 0.6705651433 0.2867629917 0.0036093776 0.0304463281 0.0086161593 #> [12,] 0.0001144042 0.9995740729 0.0001005676 0.0001092730 0.0001016824 #>  #> [[1]]$tau #> [1] 0.6627133 0.6726886 0.8800000 0.8094827 0.7090720 #>  #> [[1]]$phi #> [1] 0.2 0.2 0.2 0.2 0.2 #>  #> [[1]]$kappa #> [1] 5 #> ELBO for this run: -4888.62 #> [1] \"output_files /tmp/RtmpWVAHud/timing_mixed_simple-diagnostic-202411251034-1-190a51.csv\\n\" results <- data_reduced$results_timing  #  # input_data <- results$data$input_data # draws_and_summary <- results$draws_and_summary # log_lik_matrix_list <- results$log_lik_matrix_list # elbo_iterations <- results$elbo_iterations #  # results_model_selection <- model_selection_h(input_data, draws_and_summary, log_lik_matrix_list, elbo_iterations) #  # best_K <- results_model_selection$best_K # model_selection_tibble <- results_model_selection$model_selection_tibble # entropy <- results_model_selection$entropy_list   p <- plot_inference_h(results, data_reduced$cna, input_data, colour_by = \"karyotype\", 3) p # plot(1:10) # plot(10:1)"},{"path":"https://caravagnalab.github.io/tickTack/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"First Last. Author, maintainer.","code":""},{"path":"https://caravagnalab.github.io/tickTack/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Last F (2024). tickTack: Timing Inference Copy number alterations: Tracking Alterations Cancer Karyotypes. R package version 0.0.0.9, https://caravagnalab.github.io/tickTack/.","code":"@Manual{,   title = {tickTack: Timing Inference for Copy number alterations: Tracking Alterations in Cancer Karyotypes},   author = {First Last},   year = {2024},   note = {R package version 0.0.0.9},   url = {https://caravagnalab.github.io/tickTack/}, }"},{"path":[]},{"path":[]},{"path":"https://caravagnalab.github.io/tickTack/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Timing Inference for Copy number alterations: Tracking Alterations in Cancer Karyotypes","text":"","code":"# install.packages(\"devtools\") devtools::install_github(\"caravagnalab/tickTack\")"},{"path":"https://caravagnalab.github.io/tickTack/index.html","id":"copyright-and-contacts","dir":"","previous_headings":"Installation","what":"Copyright and contacts","title":"Timing Inference for Copy number alterations: Tracking Alterations in Cancer Karyotypes","text":"Cancer Data Science (CDS) Laboratory, University Trieste, Italy.","code":""},{"path":"https://caravagnalab.github.io/tickTack/reference/CNA.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract CNAs. — CNA","title":"Extract CNAs. — CNA","text":"Getter obtain copy number calls object.","code":""},{"path":"https://caravagnalab.github.io/tickTack/reference/CNA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract CNAs. — CNA","text":"","code":"CNA(x, type = c(\"clonal\", \"subclonal\"))"},{"path":"https://caravagnalab.github.io/tickTack/reference/CNA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract CNAs. — CNA","text":"x CNAqc object. type \"clonal\" clonal CNAs, \"subclonal\" subclonal CNAs.","code":""},{"path":"https://caravagnalab.github.io/tickTack/reference/CNA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract CNAs. — CNA","text":"tibble data.","code":""},{"path":"https://caravagnalab.github.io/tickTack/reference/Mutations.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract mutations. — Mutations","title":"Extract mutations. — Mutations","text":"Getter obtain mutation calls object.","code":""},{"path":"https://caravagnalab.github.io/tickTack/reference/Mutations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract mutations. — Mutations","text":"","code":"Mutations(x, cna = c(\"clonal\", \"subclonal\"), type = c(\"SNV\", \"indel\"))"},{"path":"https://caravagnalab.github.io/tickTack/reference/Mutations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract mutations. — Mutations","text":"x CNAqc object. cna \"clonal\" clonal CNAs, \"subclonal\" subclonal CNAs. type \"SNV\" single-nucleotide variants, \"indel\" insertion-deletions.","code":""},{"path":"https://caravagnalab.github.io/tickTack/reference/Mutations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract mutations. — Mutations","text":"tibble data.","code":""},{"path":"https://caravagnalab.github.io/tickTack/reference/chr_coordinates_GRCh38.html","id":null,"dir":"Reference","previous_headings":"","what":"GRCh38 coordinates — chr_coordinates_GRCh38","title":"GRCh38 coordinates — chr_coordinates_GRCh38","text":"Reference coordinates (GRCh38)","code":""},{"path":"https://caravagnalab.github.io/tickTack/reference/chr_coordinates_GRCh38.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GRCh38 coordinates — chr_coordinates_GRCh38","text":"","code":"chr_coordinates_GRCh38"},{"path":[]},{"path":"https://caravagnalab.github.io/tickTack/reference/chr_coordinates_GRCh38.html","id":"chr-coordinates-grch-","dir":"Reference","previous_headings":"","what":"chr_coordinates_GRCh38","title":"GRCh38 coordinates — chr_coordinates_GRCh38","text":"data frame: chr chromosome identifier length length chromosome Absolute coordinate chromosome start Absolute coordinate chromosome end centromerStart Absolute coordinate chromosome centromere start centromerEnd Absolute coordinate chromosome centromere end","code":""},{"path":"https://caravagnalab.github.io/tickTack/reference/chr_coordinates_GRCh38.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"GRCh38 coordinates — chr_coordinates_GRCh38","text":".","code":""},{"path":"https://caravagnalab.github.io/tickTack/reference/chr_coordinates_hg19.html","id":null,"dir":"Reference","previous_headings":"","what":"hg19 coordinates — chr_coordinates_hg19","title":"hg19 coordinates — chr_coordinates_hg19","text":"Reference coordinates (hg19)","code":""},{"path":"https://caravagnalab.github.io/tickTack/reference/chr_coordinates_hg19.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hg19 coordinates — chr_coordinates_hg19","text":"","code":"chr_coordinates_hg19"},{"path":[]},{"path":"https://caravagnalab.github.io/tickTack/reference/chr_coordinates_hg19.html","id":"chr-coordinates-hg-","dir":"Reference","previous_headings":"","what":"chr_coordinates_hg19","title":"hg19 coordinates — chr_coordinates_hg19","text":"data frame: chr chromosome identifier length length chromosome Absolute coordinate chromosome start Absolute coordinate chromosome end centromerStart Absolute coordinate chromosome centromere start centromerEnd Absolute coordinate chromosome centromere end","code":""},{"path":"https://caravagnalab.github.io/tickTack/reference/chr_coordinates_hg19.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"hg19 coordinates — chr_coordinates_hg19","text":".","code":""},{"path":"https://caravagnalab.github.io/tickTack/reference/fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit timing of clonal peaks in cancer genome sequencing data — fit","title":"Fit timing of clonal peaks in cancer genome sequencing data — fit","text":"function fits timing clonal peaks cancer genome sequencing data using either beta-binomial binomial model.","code":""},{"path":"https://caravagnalab.github.io/tickTack/reference/fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit timing of clonal peaks in cancer genome sequencing data — fit","text":"","code":"fit(   segments,   mutations,   purity,   possible_k = c(\"2:1\", \"2:2\", \"2:0\"),   alpha = 0.05,   min_mutations_number = 2,   beta_binomial = FALSE,   beta_binomial_disp = 0.01 )"},{"path":"https://caravagnalab.github.io/tickTack/reference/fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit timing of clonal peaks in cancer genome sequencing data — fit","text":"segments data frame containing segment information columns chr, , , Major, minor. mutations data frame containing mutation information columns chr, , , DP, NV. purity numeric value representing tumor purity. possible_k character vector possible karyotypes format \"Major:minor\". Default c(\"2:1\", \"2:2\", \"2:0\"). alpha numeric value significance level. Default 0.05. min_mutations_number integer specifying minimum number mutations required analysis. Default 2. beta_binomial logical value indicating whether use beta-binomial model. Default FALSE. beta_binomial_disp numeric value beta-binomial dispersion parameter. Default 0.01.","code":""},{"path":"https://caravagnalab.github.io/tickTack/reference/fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit timing of clonal peaks in cancer genome sequencing data — fit","text":"list containing two tibbles: inference_results summarized_results. Returns NULL results obtained.","code":""},{"path":"https://caravagnalab.github.io/tickTack/reference/fit_h.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the fit to obtain the clocks posteriors — fit_h","title":"Get the fit to obtain the clocks posteriors — fit_h","text":"Obtain approximate posterior clocks model fit number components k_max.","code":""},{"path":"https://caravagnalab.github.io/tickTack/reference/fit_h.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the fit to obtain the clocks posteriors — fit_h","text":"","code":"fit_h(   x,   max_attempts = 2,   INIT = TRUE,   tolerance = 0.01,   possible_k = c(\"2:1\", \"2:2\", \"2:0\"),   alpha = 0.05,   min_mutations_number = 2 )"},{"path":"https://caravagnalab.github.io/tickTack/reference/fit_h.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the fit to obtain the clocks posteriors — fit_h","text":"x list: CNAqc object. max_attempts num: max number repeated inference ADVI INIT logical: boolean variable set initialization phase TRUE FALSE tolerance num: tolerance ELBO optimization procedure possible_k chr: \"2:1\" \"2:2\" \"2:0\" alpha num: (type double) confidence interval level choose data fall expected binomial intervals min_mutations_number num: (type double) minimum number accepted mutations segment included inference","code":""},{"path":"https://caravagnalab.github.io/tickTack/reference/fit_h.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the fit to obtain the clocks posteriors — fit_h","text":"results_and_data = list(data = input_data_list, results = results, output_files_list = output_files_list)","code":""},{"path":"https://caravagnalab.github.io/tickTack/reference/fit_variational_h.html","id":null,"dir":"Reference","previous_headings":"","what":"fit_variational Function — fit_variational_h","title":"fit_variational Function — fit_variational_h","text":"function performs inference using ADVI algorithm. Repeat inference fails repeat avoid local minima, taking best run.","code":""},{"path":"https://caravagnalab.github.io/tickTack/reference/fit_variational_h.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fit_variational Function — fit_variational_h","text":"","code":"fit_variational_h(   input_data,   max_attempts = 2,   initialization = NULL,   INIT = TRUE,   initial_iter = 1000,   grad_samples = 10,   elbo_samples = 100,   tolerance = 0.01 )"},{"path":"https://caravagnalab.github.io/tickTack/reference/fit_variational_h.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fit_variational Function — fit_variational_h","text":"input_data list: List 7: $S: int, $N: int, $karyotype: num (0 1), $seg_assignment: num, $peaks:List N num (1:2), $NV: num, $DP: num max_attempts num: max number repeated inference ADVI initialization list: List 4: $w: num (1:S, 1:3), $tau: num (1:K), $phi: num (1:K), $kappa: num INIT logical: boolean variable set initialization phase TRUE FALSE initial_iter description grad_samples description elbo_samples description tolerance num: tolerance ELBO optimization procedure","code":""},{"path":"https://caravagnalab.github.io/tickTack/reference/fit_variational_h.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fit_variational Function — fit_variational_h","text":"best_fit","code":""},{"path":"https://caravagnalab.github.io/tickTack/reference/get_clonal_peaks.html","id":null,"dir":"Reference","previous_headings":"","what":"get_clonal_peaks Function — get_clonal_peaks","title":"get_clonal_peaks Function — get_clonal_peaks","text":"Obtain theoretical peaks observed VAF spectrum.","code":""},{"path":"https://caravagnalab.github.io/tickTack/reference/get_clonal_peaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_clonal_peaks Function — get_clonal_peaks","text":"","code":"get_clonal_peaks(k, purity)"},{"path":"https://caravagnalab.github.io/tickTack/reference/get_clonal_peaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_clonal_peaks Function — get_clonal_peaks","text":"k karyotype purity peaks","code":""},{"path":"https://caravagnalab.github.io/tickTack/reference/get_initialization.html","id":null,"dir":"Reference","previous_headings":"","what":"get_initialization — get_initialization","title":"get_initialization — get_initialization","text":"Perform c-means proportions mutations fall first second binomial interval (accepted mutations) retrieve centroids u matrix used initialization parameters.","code":""},{"path":"https://caravagnalab.github.io/tickTack/reference/get_initialization.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_initialization — get_initialization","text":"","code":"get_initialization(input_data, purity, phi = c(), kappa = 5, alpha = 0.05)"},{"path":"https://caravagnalab.github.io/tickTack/reference/get_initialization.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_initialization — get_initialization","text":"input_data list: List 7: $S: int, $N: int, $karyotype: num (0 1), $seg_assignment: num, $peaks:List N num (1:2), $NV: num, $DP: num purity num: (type = double) sample purity 0 1 phi parameters dirichlet reparametrization uniformly initialized kappa parameters dirichlet reparametrization alpha num: (type double) confidence interval level choose data fall expected binomial intervals","code":""},{"path":"https://caravagnalab.github.io/tickTack/reference/get_initialization.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_initialization — get_initialization","text":"inits list: List 4: $w: num (1:S, 1:3), $tau: num (1:K), $phi: num (1:K), $kappa: num","code":""},{"path":"https://caravagnalab.github.io/tickTack/reference/karyo_to_int.html","id":null,"dir":"Reference","previous_headings":"","what":"karyo_to_int Function — karyo_to_int","title":"karyo_to_int Function — karyo_to_int","text":"function allows change string representation CN events numeric values 0 - 1.","code":""},{"path":"https://caravagnalab.github.io/tickTack/reference/karyo_to_int.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"karyo_to_int Function — karyo_to_int","text":"","code":"karyo_to_int(k)"},{"path":"https://caravagnalab.github.io/tickTack/reference/karyo_to_int.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"karyo_to_int Function — karyo_to_int","text":"k karyotype string","code":""},{"path":"https://caravagnalab.github.io/tickTack/reference/model_selection_h.html","id":null,"dir":"Reference","previous_headings":"","what":"model_selection Function — model_selection_h","title":"model_selection Function — model_selection_h","text":"Perform model selection among models fit varying number mixture components (number clocks).","code":""},{"path":"https://caravagnalab.github.io/tickTack/reference/model_selection_h.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"model_selection Function — model_selection_h","text":"","code":"model_selection_h(   data,   draws_and_summary,   log_lik_matrix_list,   elbo_iterations )"},{"path":"https://caravagnalab.github.io/tickTack/reference/model_selection_h.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"model_selection Function — model_selection_h","text":"data list k_max lists: $input_data:list: List 7: $S: int, $N: int, $karyotype: num (0 1), $seg_assignment: num, $peaks:List N num (1:2), $NV: num, $DP: num draws_and_summary list lenght k_max draws form variational method summary statistics draws approximate posterior log_lik_matrix_list list lenght k_max elbo_iterations list lenght k_max","code":""},{"path":"https://caravagnalab.github.io/tickTack/reference/model_selection_h.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"model_selection Function — model_selection_h","text":"result_model_selection: list $best_fit, $best_K, $model_selection_tibble, $entropy_list)","code":""},{"path":"https://caravagnalab.github.io/tickTack/reference/pcawg_example.html","id":null,"dir":"Reference","previous_headings":"","what":"pcawg_example — pcawg_example","title":"pcawg_example — pcawg_example","text":"Pcawg example test timing inference","code":""},{"path":"https://caravagnalab.github.io/tickTack/reference/pcawg_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pcawg_example — pcawg_example","text":"","code":"pcawg_example"},{"path":[]},{"path":"https://caravagnalab.github.io/tickTack/reference/pcawg_example.html","id":"pcawg-example","dir":"Reference","previous_headings":"","what":"pcawg_example","title":"pcawg_example — pcawg_example","text":"list: mutations tibble observed mutations cna tibble observed copy number alterations metadata tibble containing sample metadata","code":""},{"path":"https://caravagnalab.github.io/tickTack/reference/pcawg_example.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"pcawg_example — pcawg_example","text":".","code":""},{"path":"https://caravagnalab.github.io/tickTack/reference/plot_inference_h.html","id":null,"dir":"Reference","previous_headings":"","what":"prepare_input_data Function — plot_inference_h","title":"prepare_input_data Function — plot_inference_h","text":"function obtains list input data used stan model.","code":""},{"path":"https://caravagnalab.github.io/tickTack/reference/plot_inference_h.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"prepare_input_data Function — plot_inference_h","text":"","code":"plot_inference_h(results, x_segments, input_data, colour_by = \"karyotype\", K)"},{"path":"https://caravagnalab.github.io/tickTack/reference/plot_inference_h.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"prepare_input_data Function — plot_inference_h","text":"results list(data = input_data_list, results = results, output_files_list = output_files_list) x_segments tibble((S3: tbl_df/tbl/data.frame) chr, , , Major, minor, total_cn data$cna) input_data List 7: $S: int, $N: int, $karyotype: num (0 1), $seg_assignment: num, $peaks:List N num (1:2), $NV: num, $DP: num colour_by chr: default =  \"karyotype\" K mun: number clocks","code":""},{"path":"https://caravagnalab.github.io/tickTack/reference/plot_inference_h.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"prepare_input_data Function — plot_inference_h","text":"p : plot inference results credibility intervals chromosome absolute positions","code":""},{"path":"https://caravagnalab.github.io/tickTack/reference/plot_timing.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot timing of clonal peaks in cancer genome sequencing data — plot_timing","title":"Plot timing of clonal peaks in cancer genome sequencing data — plot_timing","text":"function generates plot showing timing clonal peaks cancer genome sequencing data.","code":""},{"path":"https://caravagnalab.github.io/tickTack/reference/plot_timing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot timing of clonal peaks in cancer genome sequencing data — plot_timing","text":"","code":"plot_timing(fit_results, segments, colour_by = \"karyotype\", ref = \"GRCh38\")"},{"path":"https://caravagnalab.github.io/tickTack/reference/plot_timing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot timing of clonal peaks in cancer genome sequencing data — plot_timing","text":"fit_results list containing results fit_timing function, specifically summarized_results. segments data frame containing segment information columns chr, , , Major, minor. colour_by character string specifying variable color plot . Default \"karyotype\". ref Reference genome desired. Either 'GRCh38' 'hg19'","code":""},{"path":"https://caravagnalab.github.io/tickTack/reference/plot_timing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot timing of clonal peaks in cancer genome sequencing data — plot_timing","text":"ggplot object showing timing clonal peaks.","code":""},{"path":"https://caravagnalab.github.io/tickTack/reference/prepare_input_data.html","id":null,"dir":"Reference","previous_headings":"","what":"prepare_input_data Function — prepare_input_data","title":"prepare_input_data Function — prepare_input_data","text":"function obtains list input data used stan model.","code":""},{"path":"https://caravagnalab.github.io/tickTack/reference/prepare_input_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"prepare_input_data Function — prepare_input_data","text":"","code":"prepare_input_data(   mutations,   segments,   purity,   possible_k = c(\"2:1\", \"2:2\", \"2:0\"),   alpha = 0.05,   min_mutations_number = 2 )"},{"path":"https://caravagnalab.github.io/tickTack/reference/prepare_input_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"prepare_input_data Function — prepare_input_data","text":"mutations list: output CNAqc Mutations(x), x CNAqc object segments list: output CNAqc CNA(x), x CNAqc object purity num: (type = double) sample purity 0 1 possible_k chr: \"2:1\" \"2:2\" \"2:0\" alpha num: (type double) confidence interval level choose data fall expected binomial intervals min_mutations_number num: (type double) minimum number accepted mutations segment included inference","code":""},{"path":"https://caravagnalab.github.io/tickTack/reference/prepare_input_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"prepare_input_data Function — prepare_input_data","text":"accepted_data: list $input_data:list: List 7: $S: int, $N: int, $karyotype: num (0 1), $seg_assignment: num, $peaks:List N num (1:2), $NV: num, $DP: num $accepted_cna: tibble (S × 5)(S3: tbl_df/tbl/data.frame): $segment_original_indx: int, $segment_name: chr, $segment_id: num, $karyotype: chr, $chr: chr","code":""},{"path":"https://caravagnalab.github.io/tickTack/reference/tickTack-package.html","id":null,"dir":"Reference","previous_headings":"","what":"tickTack: Timing Inference for Copy number alterations: Tracking Alterations in Cancer Karyotypes — tickTack-package","title":"tickTack: Timing Inference for Copy number alterations: Tracking Alterations in Cancer Karyotypes — tickTack-package","text":"package (one paragraph).","code":""},{"path":[]},{"path":"https://caravagnalab.github.io/tickTack/reference/tickTack-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"tickTack: Timing Inference for Copy number alterations: Tracking Alterations in Cancer Karyotypes — tickTack-package","text":"Maintainer: First Last first.last@example.com (ORCID)","code":""}]
